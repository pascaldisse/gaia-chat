UI〈§⊕γ⊕δ〉

// State Management System
§:Σ→⍚→⚡→Ω

// UI Framework
γ:⟨{
  components:{
    chat, message, chatInput
  },
  theme:{
    fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",
    primaryColor:"#0084ff",
    secondaryColor:"#f5f5f5",
    textColor:"#333333",
    borderRadius:"20px",
    spacing:{
      xs:"4px",
      sm:"8px",
      md:"16px",
      lg:"24px",
      xl:"32px"
    }
  }
}⟩

// Application Definition
δ:⟨{
  state:⟨
    currentChat:[],
    personas:[
      {id:"1", name:"Gaia", image:"/assets/personas/gaia-default.jpeg", isDefault:true},
      {id:"2", name:"Sage", image:"/default-avatar.png"},
      {id:"3", name:"Guru", image:"/default-avatar.png"}
    ],
    activePersonas:[],
    isLoading:false
  ⟩,
  init:()⟨
    // Initialize with default persona active
    activePersonas⊜[personas.find(p => p.isDefault) || personas[0]]
  ⟩,
  actions:⟨
    sendMessage:(message)⟨
      if (!message.trim()) return
      
      // Add user message
      currentChat⊕{
        id: Date.now(),
        content: message,
        isUser: true
      }
      
      // Set loading
      isLoading⊜true
      
      // Generate AI response
      setTimeout(() => {
        currentChat⊕{
          id: Date.now(),
          content: generateResponse(message),
          isUser: false,
          personaId: activePersonas[0].id
        }
        isLoading⊜false
      }, 1000)
    ⟩,
    regenerateResponse:(message)⟨
      if (!message) return
      
      const messageIndex = currentChat.findIndex(m => m.id === message.id)
      
      if (messageIndex !== -1) {
        // Remove the message and all subsequent messages
        currentChat⊜currentChat.slice(0, messageIndex)
        
        // Generate new response
        currentChat⊕{
          id: Date.now(),
          content: generateResponse(message.content),
          isUser: false,
          personaId: activePersonas[0].id
        }
      }
    ⟩,
    generateResponse:(message)⟨
      const responses = [
        "I understand your question about " + message.substring(0, 20) + "...",
        "That's an interesting point about " + message.substring(0, 15) + "...",
        "Let me think about " + message.substring(0, 10) + "...",
        "I'd be happy to help with " + message.substring(0, 25) + "..."
      ]
      return responses[Math.floor(Math.random() * responses.length)]
    ⟩,
    toggleWebSearch:(enabled)⟨
      console.log(`Web search ${enabled ? 'enabled' : 'disabled'}`)
      
      // In a real implementation, this would update the global search state
    ⟩
  ⟩,
  render:⟨
    П class:"app-container"→[
      (chat {
        currentChat: currentChat,
        message: message,
        personas: personas,
        activePersonas: activePersonas,
        isLoading: isLoading,
        onSendMessage: sendMessage,
        onRegenerate: regenerateResponse,
        onToggleSearch: toggleWebSearch
      })
    ]
  ⟩
}⟩